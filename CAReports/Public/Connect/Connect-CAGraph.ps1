function Connect-CAGraph {
    <#
    .SYNOPSIS
        Connects to Microsoft Graph with the required permissions for CA policy management.
    
    .DESCRIPTION
        Establishes a connection to Microsoft Graph API with the permissions required for
        fetching and analyzing Conditional Access policies. The function supports interactive
        authentication, client credential flow, and certificate-based authentication.
    
    .PARAMETER TenantId
        The tenant ID to connect to
    
    .PARAMETER ClientId
        The client/application ID to use for authentication
    
    .PARAMETER ClientSecret
        The client secret to use for authentication (for client credential flow) as a secure string
    
    .PARAMETER CertificateThumbprint
        The thumbprint of the certificate to use for authentication
    
    .PARAMETER Environment
        The environment to use for the connection (Development or Production)
    
    .PARAMETER OutputPath
        The base path to use for all output files generated by the module
    
    .PARAMETER Scopes
        The scopes to request for the connection
    
    .EXAMPLE
        Connect-CAGraph -TenantId "contoso.onmicrosoft.com"
        
        Connects to the Microsoft Graph API using interactive authentication.
    
    .EXAMPLE
        $secureSecret = ConvertTo-SecureString -String "mySecret" -AsPlainText -Force
        Connect-CAGraph -TenantId "contoso.onmicrosoft.com" -ClientId "12345678-1234-1234-1234-123456789012" -ClientSecret $secureSecret
        
        Connects to the Microsoft Graph API using client credential flow.
    
    .EXAMPLE
        Connect-CAGraph -TenantId "contoso.onmicrosoft.com" -ClientId "12345678-1234-1234-1234-123456789012" -CertificateThumbprint "1234567890ABCDEF1234567890ABCDEF12345678"
        
        Connects to the Microsoft Graph API using certificate-based authentication.
    
    .NOTES
        Requires the Microsoft.Graph.Identity.SignIns module.
    #>
    [CmdletBinding(DefaultParameterSetName = 'Interactive')]
    param (
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$TenantId,
        
        [Parameter(Mandatory = $false, ParameterSetName = 'Interactive')]
        [Parameter(Mandatory = $true, ParameterSetName = 'ClientSecret')]
        [Parameter(Mandatory = $true, ParameterSetName = 'Certificate')]
        [string]$ClientId,
        
        [Parameter(Mandatory = $true, ParameterSetName = 'ClientSecret')]
        [System.Security.SecureString]$ClientSecret,
        
        [Parameter(Mandatory = $true, ParameterSetName = 'Certificate')]
        [string]$CertificateThumbprint,
        
        [Parameter(Mandatory = $false)]
        [ValidateSet('Development', 'Production')]
        [string]$Environment = 'Production',
        
        [Parameter(Mandatory = $false)]
        [string]$OutputPath,
        
        [Parameter(Mandatory = $false)]
        [string[]]$Scopes = @(
            'Policy.Read.All',
            'Directory.Read.All',
            'Application.Read.All'
        )
    )
    
    begin {
        # Check for required Microsoft Graph modules
        $requiredModules = @(
            'Microsoft.Graph.Identity.SignIns',
            'Microsoft.Graph.Groups',
            'Microsoft.Graph.Users',
            'Microsoft.Graph.Identity.DirectoryManagement'
        )
        
        $missingModules = @()
        foreach ($module in $requiredModules) {
            if (-not (Get-Module -ListAvailable -Name $module)) {
                $missingModules += $module
            }
        }
        
        if ($missingModules.Count -gt 0) {
            Write-Error "The following required modules are missing: $($missingModules -join ', '). Please install them with: Install-Module <ModuleName> -Scope CurrentUser"
            return
        }
        
        Write-Verbose "Starting authentication to Microsoft Graph for tenant: $TenantId"
        
        # If OutputPath is specified, use that directly
        if (-not [string]::IsNullOrEmpty($OutputPath)) {
            # Set absolute output path
            $script:CAConfig.BaseOutputPath = $OutputPath
        } 
        
        # Store in module-level variable
        $script:CAConfig.TenantId = $TenantId
        $script:CAConfig.Environment = $Environment
    }
    
    process {
        try {
            # Disconnect any existing connections
            Disconnect-MgGraph -ErrorAction SilentlyContinue
            
            # Set up the connection parameters
            $params = @{
                TenantId = $TenantId
                ErrorAction = 'Stop'
            }
            
            # Add parameters based on authentication method
            switch ($PSCmdlet.ParameterSetName) {
                'Interactive' {
                    Write-Verbose "Using interactive authentication"
                    $params.Scopes = $Scopes
                    
                    if ($ClientId) {
                        $params.ClientId = $ClientId
                    }
                }
                'ClientSecret' {
                    Write-Verbose "Using client credential flow authentication"
                    $params.ClientId = $ClientId
                    $params.ClientSecret = $ClientSecret
                }
                'Certificate' {
                    Write-Verbose "Using certificate-based authentication"
                    $params.ClientId = $ClientId
                    $params.CertificateThumbprint = $CertificateThumbprint
                }
            }
            
            # Connect to Microsoft Graph
            Connect-MgGraph @params
            
            # Get and store the context
            $context = Get-MgContext
            if ($null -eq $context) {
                throw "Failed to establish Microsoft Graph connection."
            }
            
            # Update connection status
            $script:CAConfig.ConnectionStatus = $true
            
            # Get config with resolved paths
            $config = Get-CAConfig
            $outputBasePath = $config.OutputPaths.Base
            
            # Initialize all required folders
            $outputBasePath = Initialize-CAFolders -Path $outputBasePath
            
            # Return connection information
            [PSCustomObject]@{
                TenantId = $TenantId
                User = $context.Account
                Scopes = $context.Scopes
                Environment = $Environment
                OutputPath = $outputBasePath
                Status = "Connected"
            }
        }
        catch {
            $script:CAConfig.ConnectionStatus = $false
            Write-Error "Failed to connect to Microsoft Graph: $_"
            throw $_
        }
    }
    
    end {
        Write-Verbose "Authentication completed"
    }
} 